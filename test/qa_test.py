import sys

sys.path.append("..")

import torch
from torch import tensor
import numpy as np

from models.qa.qa import Model
from config.config_parser import create_config

config = create_config("../config/sfks.config")
gpu_list = []

model = Model(config, gpu_list)
option_token_ids = tensor([[458, 155, 207, 19050, 6240, 2, 110, 2496, 2322, 0,
                            0, 0, 0, 0, 0, 0],
                           [458, 155, 207, 812, 1630, 2039, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0],
                           [26, 4514, 186, 7754, 2379, 9, 4583, 742, 155, 892,
                            2, 452, 7064, 3037, 75, 2009],
                           [5, 10274, 3, 1382, 4938, 5262, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0],
                           [92, 45, 63, 3, 219, 18, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0],
                           [92, 298, 63, 3, 219, 18, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0],
                           [92, 964, 5950, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0],
                           [92, 554, 3, 515, 251, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0]])
question_token_ids = tensor([[2222, 1738, 768, 41, 155, 56, 16, 28, 1934, 2, 2222, 5,
                              1934, 144, 3, 11, 48, 32, 268, 14, 30, 36, 3, 222,
                              13],
                             [2222, 1738, 768, 41, 155, 56, 16, 28, 1934, 2, 2222, 5,
                              1934, 144, 3, 11, 48, 32, 268, 14, 30, 36, 3, 222,
                              13],
                             [2222, 1738, 768, 41, 155, 56, 16, 28, 1934, 2, 2222, 5,
                              1934, 144, 3, 11, 48, 32, 268, 14, 30, 36, 3, 222,
                              13],
                             [2222, 1738, 768, 41, 155, 56, 16, 28, 1934, 2, 2222, 5,
                              1934, 144, 3, 11, 48, 32, 268, 14, 30, 36, 3, 222,
                              13],
                             [66, 356, 827, 17, 100, 780, 2, 68, 22, 92, 11, 48,
                              516, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0],
                             [66, 356, 827, 17, 100, 780, 2, 68, 22, 92, 11, 48,
                              516, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0],
                             [66, 356, 827, 17, 100, 780, 2, 68, 22, 92, 11, 48,
                              516, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0],
                             [66, 356, 827, 17, 100, 780, 2, 68, 22, 92, 11, 48,
                              516, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0]])
labels = tensor([[1, 1, 1, 0],
                 [1, 0, 1, 0]], dtype=torch.float)

# =============================
# 验证模型结构
y = model(option_token_ids, question_token_ids, labels)
print(y.shape)
# =============================

# =============================
# 计算损失
criterion = torch.nn.CrossEntropyLoss()
loss = criterion(y, labels)
print(loss.item())
# =============================

# =============================
# 获得结果
print(y)
preds = np.where(y.detach().cpu().numpy() > 0.5, 1., 0.)
print(preds)
# =============================

# =============================
# 计算评价指标
true = [[1, 1, 1, 0], [1, 0, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1]]
pred = [[1, 1, 1, 0], [1, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0]]
tp, fp, fn, tn = 0, 0, 0, 0
for i in range(len(true)):
    tp += (true[i] == pred[i])

accuracy = tp / len(true)
print(accuracy)